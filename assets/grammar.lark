start: statement+

statement: compound_stmt | simple_stmt

simple_stmt: print_stmt

compound_stmt: function_def
        | conditional
        | while_stmt
        | variable_def

// Simple Statements
// =================

print_stmt: "print" "(" expression ")"

// Compound Statements
// ===================

// Functions
function_def: TYPE NAME "(" parameter_list? ")" "{" statement* return_statement? "}"
parameter_list: parameter ("," parameter)*
parameter: TYPE NAME
return_statement: "return" expression

// Conditionals
conditional: if_stmt | else_stmt | elif_stmt
if_stmt: "if" condition "{" statement* "}"
elif_stmt: "else" if_stmt
else_stmt: "else" "{" statement* "}"

condition: value (COMPARATOR value)*

// Loop types
while_stmt: "while" condition "{" statement* "}"

// Variable things
variable_def: TYPE NAME "=" expression

// Other definitions
expression: sum_expr

sum_expr: product_expr
        | sum_expr "+" product_expr -> addition
        | sum_expr "-" product_expr -> subtraction

product_expr: value
        | product_expr "*" value -> multiplication
        | product_expr "/" value -> division

value: NUMBER
        | NAME
        | ESCAPED_STRING
        | func_call

// Allow for function calls with or without arguments.
func_call: NAME "(" argument_list? ")"
argument_list: expression ("," expression)*   

TYPE: "void" | "int" | "float" | "str" | "bool"
COMPARATOR: "==" | ">" | ">=" | "<" | "<=" | "&&" | "||"

// Imported tokens for common patterns
%import common.ESCAPED_STRING
%import common.CNAME -> NAME
%import common.SIGNED_NUMBER -> NUMBER
%import common.WS
%ignore WS

